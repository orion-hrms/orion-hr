type Survey @model
{
  id: ID!
  surveyID: String!
  surveyName: String!
  userId: String
}

type Question @model
@auth(
    rules: [
      {
        allow: groups
        groups: ["Administrator"]
        queries: [get, list]
        mutations: [create, update, delete]
      }
      {
        allow: owner
        queries: [get, list]
        mutations: [create, update, delete]
      }
      {
        allow: public
        queries: [get, list]
        mutations: [create]
        provider: apiKey 
      }
    ]
  )
{
  id: ID!
  questionID: String!
  question1: String!
  question2: String!
  question3: String!
  question4: String!
  response: String!
  analyze: String!
}

type S3Object @model {
  bucket: String!
  region: String!
  key: String!
}

type user @model
{
  id: ID!
  UserId: String
  UserName: String
  UserEmail: String
  UserRole: String
  UserStatus: String
}

type employeedetail @model {
  id: ID!
  UserId: String
  UserName: String
  UserEmail: String
  tag: String
  owner: String
  paygrade: PayGrade
  designation: String
  department: Department
  joiningDate: String
  # Refrence the S3Object  type from a field.
  file: S3Object
}
enum Department {
  HR
  IT
  Admin
  Marketing
  Sales
}
enum PayGrade {
  A
  B
  C
  D
  Contract
}
type Tickets @model {
  id: ID!
  createdby: String
  priority: Int
  subject: String
  category: String
  feedback: String
  body: String
  createdon: String
}

type Reminders @model {
  id: ID!
  createdby: String
  priority: Int
  subject: String
  category: String
  createdon: String
}
type Meetings @model {
  id: ID!
  createdon: String
  subject: String
  Category: String
  ScheduledOn: String
}
